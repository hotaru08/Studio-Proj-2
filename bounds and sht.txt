#include "Camera3.h"
#include "Application.h"
#include "Mtx44.h"

Camera3::Camera3()
{
}

Camera3::~Camera3()
{
}

void Camera3::bounds()
{	
}

void Camera3::Init(const Vector3& pos, const Vector3& target, const Vector3& up)
{
	this->position = defaultPosition = pos;
	this->target = defaultTarget = target;
	view = (target - position).Normalized();
	Vector3 right = view.Cross(up);
	right.y = 0;
	right.Normalize();
	this->up = defaultUp = right.Cross(view).Normalized();

	SANIC = 1000.f;
	speed = false;
}

void Camera3::Update(double dt)
{
	Vector3 view = (target - position).Normalized();
	Vector3 right = view.Cross(up);
	static const float CAMERA_SPEED = 100.f;



	positioncam = position;

	if (Application::IsKeyPressed('W'))
	{
		positioncam = position + (view * SANIC * dt);
		if (positioncam.x < 2000 && positioncam.x > -2000)
		{
			position.x = position.x + (view.x * SANIC * dt);
			target.x = position.x + view.x;

		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.z < 2000 && positioncam.z > -2000)
		{
			position.z = position.z + (view.z * SANIC * dt);
			target.z = position.z + view.z;

		}
		else
		{
			position =   position;
			target = position + view;
		}
		if (positioncam.y < 200 && positioncam.y > 1)
		{
			position.y = position.y - (view.y* 40.f *dt);
			target.y = position.y + view.y;
		}
		else
		{
			position = position;
			target = position + view;
		}
	}
	if (Application::IsKeyPressed('S'))
	{
		positioncam = position - (view * SANIC * dt);
		if (positioncam.x < 2000 && positioncam.x > -2000)
		{
			position.x = position.x - view.x * SANIC * dt;
			target.x = position.x + view.x;
		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.z < 2000 && positioncam.z > -2000)
		{
			position.z = position.z - view.z * SANIC * dt;
			target.z = position.z + view.z;

		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.y < 200 && positioncam.y > 1)
		{
			position.y = position.y - (view.y* 40.f *dt);
			target.y = position.y + view.y;
		}
		else
		{
			position = position;
			target = position + view;
		}
	}
	if (Application::IsKeyPressed('A'))
	{
		
		positioncam = position - (right* SANIC * dt);
		if (positioncam.x < 2000 && positioncam.x > -2000)
		{
			position.x = position.x - right.x * SANIC * dt;
			target.x = position.x + view.x;
		}

		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.z < 2000 && positioncam.z > -2000)
		{
			position.z = position.z - right.z * SANIC * dt;
			target.z = position.z + view.z;

		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.y < 200 && positioncam.y > 1)
		{
			position.y = position.y - (view.y* 40.f *dt);
			target.y = position.y + view.y;
		}
		else
		{
			position = position;
			target = position + view;
		}
	}
	if (Application::IsKeyPressed('D'))
	{
		positioncam = position + (right* SANIC * dt);

		if (positioncam.x < 2000 && positioncam.x > -2000)
		{
			position.x = position.x + right.x * SANIC * dt;
			target.x = position.x + view.x;
		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.z < 2000 && positioncam.z > -2000)
		{
			position.z = position.z + right.z * SANIC * dt;
			target.z = position.z + view.z;

		}
		else
		{
			position = position;
			target = position + view;
		}
		if (positioncam.y < 200 && positioncam.y > 1)
		{
			position.y = position.y - (view.y* 40.f *dt);
			target.y = position.y + view.y;
		}
		else
		{
			position = position;
			target = position + view;
		}
	}
	if (Application::IsKeyPressed('M'))
	{
		Vector3 view = (target - position).Normalized();
		position = position + up;
		target = position + view;
	}
	if (Application::IsKeyPressed('N'))
	{
		Vector3 view = (target - position).Normalized();
		position = position - up;
		target = position + view;
	}
	if (Application::IsKeyPressed(VK_LEFT))
	{
		yaw = (float)(CAMERA_SPEED * dt);
		Mtx44 rotation;
		rotation.SetToRotation(yaw, 0, 1, 0);
		view = rotation * view;
		target = position + view;
		up = rotation * up;
	}
	if (Application::IsKeyPressed(VK_RIGHT))
	{
		yaw = (float)(-CAMERA_SPEED * dt);
		Mtx44 rotation;
		rotation.SetToRotation(yaw, 0, 1, 0);
		view = rotation * view;
		target = position + view;
		up = rotation * up;
	}
	if (Application::IsKeyPressed(VK_UP))
	{
		float pitch = (float)(CAMERA_SPEED * dt);
		right.y = 0;
		right.Normalize();
		up = right.Cross(view).Normalized();
		Mtx44 rotation;
		rotation.SetToRotation(pitch, right.x, right.y, right.z);
		view = rotation * view;
		target = position + view;
	}
	if (Application::IsKeyPressed(VK_DOWN))
	{
		float pitch = (float)(-CAMERA_SPEED * dt);
		right.y = 0;
		right.Normalize();
		up = right.Cross(view).Normalized();
		Mtx44 rotation;
		rotation.SetToRotation(pitch, right.x, right.y, right.z);
		view = rotation * view;
		target = position + view;
	}

	if (Application::IsKeyPressed('R'))
	{
		Reset();
	}

	if (Application::IsKeyPressed('E'))
	{
		if ((positioncam.x < 150 && positioncam.x > -150) && (positioncam.z < 150 && positioncam.z > -150))
		{
			SANIC = 1000.f;
		}

	}

}

void Camera3::Reset()
{
	position = defaultPosition;
	target = defaultTarget;
	up = defaultUp;
}

float Camera3::getpos_x()
{
	return position.x;
}

float Camera3::getpos_y()
{
	return position.y;
}

float Camera3::getpos_z()
{
	return position.z;
}